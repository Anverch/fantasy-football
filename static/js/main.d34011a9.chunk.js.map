{"version":3,"sources":["components/SideMenu/SideMenuButton.js","components/Navigation/Navigation.js","components/SideMenu/SideMenu.js","components/Backdrop/Backdrop.js","App.js","serviceWorker.js","index.js"],"names":["sideMenuButton","props","className","onClick","click","navigation","menuClickHandler","href","sideMenu","menuClasses","show","backdrop","App","state","sideMenuOpen","navigationClickHandler","setState","prevState","backdropClickHandler","this","style","height","marginTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wWAWeA,G,MARQ,SAAAC,GAAK,OACxB,4BAAQC,UAAU,cAAcC,QAASF,EAAMG,OAC3C,yBAAKF,UAAU,qBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,wBCiBRG,G,MAnBI,SAAAJ,GAAK,OACpB,4BAAQC,UAAU,cACd,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,4BACX,kBAAC,EAAD,CAAgBE,MAAOH,EAAMK,oBAEjC,yBAAKJ,UAAU,YAAf,oBACA,yBAAKA,UAAU,WACf,yBAAKA,UAAU,kBACX,4BACI,4BAAI,uBAAGK,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,aACJ,4BAAI,uBAAGA,KAAK,KAAR,kBCUTC,G,MAvBE,SAAAP,GACb,IAAIQ,EAAc,YAKlB,OAHIR,EAAMS,OACND,EAAc,kBAGd,yBAAKP,UAAWO,GACZ,4BACI,4BACI,uBAAGF,KAAK,KAAR,SAEJ,4BACI,uBAAGA,KAAK,KAAR,aAEJ,4BACI,uBAAGA,KAAK,KAAR,gBCZLI,G,MAJE,SAAAV,GAAK,OAClB,yBAAKC,UAAU,WAAWC,QAASF,EAAMG,UCwC9BQ,E,4MArCbC,MAAQ,CACNC,cAAc,G,EAGhBC,uBAAyB,WACvB,EAAKC,UAAS,SAACC,GACb,MAAO,CAACH,cAAeG,EAAUH,kB,EAIrCI,qBAAuB,WACrB,EAAKF,SAAS,CAACF,cAAc,K,uDAI7B,IAAIH,EAMJ,OAJIQ,KAAKN,MAAMC,eACbH,EAAW,kBAAC,EAAD,CAAUP,MAAOe,KAAKD,wBAIjC,kBAAC,IAAD,KACE,yBAAKE,MAAO,CAAEC,OAAQ,SACpB,kBAAC,EAAD,CAAYf,iBAAkBa,KAAKJ,yBACnC,kBAAC,EAAD,CAAUL,KAAMS,KAAKN,MAAMC,eAC1BH,EACD,0BAAMS,MAAO,CAACE,UAAW,SACzB,uD,GA9BQC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d34011a9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SideMenuButton.css\";\r\n\r\nconst sideMenuButton = props => (\r\n    <button className=\"menu_button\" onClick={props.click}>\r\n        <div className=\"menu_button_line\"/>\r\n        <div className=\"menu_button_line\"/>\r\n        <div className=\"menu_button_line\"/>\r\n    </button>\r\n);\r\n\r\nexport default sideMenuButton;","import React from \"react\";\r\n\r\nimport SideMenuButton from \"../SideMenu/SideMenuButton\"\r\nimport \"./Navigation.css\"\r\n\r\nconst navigation = props => (\r\n    <header className=\"navigation\">\r\n        <nav className=\"navigation_tool\">\r\n            <div className=\"navigation_toggle_button\">\r\n                <SideMenuButton click={props.menuClickHandler} />\r\n            </div>\r\n            <div className=\"nav_logo\">Saiyan&nbsp;League</div>\r\n            <div className=\"spacer\"></div>\r\n            <div className=\"nav_tool_items\">\r\n                <ul>\r\n                    <li><a href=\"/\">Home</a></li>\r\n                    <li><a href=\"/\">All-Time</a></li>\r\n                    <li><a href=\"/\">Records</a></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    </header>\r\n);\r\n\r\nexport default navigation;","import React from \"react\";\r\n\r\nimport \"./SideMenu.css\";\r\n\r\nconst sideMenu = props => {\r\n    let menuClasses = \"side_menu\";\r\n\r\n    if (props.show) {\r\n        menuClasses = \"side_menu open\";\r\n    }\r\n    return (\r\n        <nav className={menuClasses}>\r\n            <ul>\r\n                <li>\r\n                    <a href=\"/\">Home</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"/\">All-Time</a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"/\">Records</a>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n} \r\n\r\nexport default sideMenu;","import React from \"react\";\r\n\r\nimport \"./Backdrop.css\"\r\n\r\nconst backdrop = props => (\r\n    <div className=\"backdrop\" onClick={props.click}></div>\r\n);\r\n\r\nexport default backdrop;","import React, {Component} from 'react';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Navigation from \"./components/Navigation/Navigation.js\"\nimport SideMenu from './components/SideMenu/SideMenu';\nimport Backdrop from './components/Backdrop/Backdrop';\n\nclass App extends Component {\n\n  state = {\n    sideMenuOpen: false\n  };\n\n  navigationClickHandler = () => {\n    this.setState((prevState)=>{\n      return {sideMenuOpen: !prevState.sideMenuOpen};\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({sideMenuOpen: false})\n  }\n\n  render() {\n    let backdrop;\n  \n    if (this.state.sideMenuOpen ){\n      backdrop = <Backdrop click={this.backdropClickHandler} />\n    }\n\n    return (\n      <Router>\n        <div style={{ height: \"100%\"}}>\n          <Navigation menuClickHandler={this.navigationClickHandler} />\n          <SideMenu show={this.state.sideMenuOpen}/>\n          {backdrop}\n          <main style={{marginTop: \"64px\"}}>\n          <p>this is the page!</p>\n          </main>\n  \n        </div>\n      </Router>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}